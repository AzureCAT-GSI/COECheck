!function(e){var t=function(){function e(t){e.isDefined=t.isDefined,e.isUndefined=t.isUndefined,e.isObject=t.isObject,e.isArray=t.isArray,e.isString=t.isString,e.extend=t.extend,e.toJson=t.toJson,e.fromJson=t.fromJson,e.forEach=t.forEach,e.noop=t.noop}return e.isNullOrUndefined=function(t){return e.isUndefined(t)||null===t},e.isNumber=function(e){return!isNaN(parseFloat(e))&&isFinite(e)},e.generateGuid=function(){for(var e=[],t="0123456789abcdef",i=0;36>i;i++)e[i]=t.substr(Math.floor(16*Math.random()),1);return e[8]=e[13]=e[18]=e[23]="-",e[14]="4",e[19]=t.substr(3&e[19]|8,1),e.join("")},e}(),i=function(){function e(i){var n=this;this._config=t.extend(e.defaultConfig,i),this._self=this._config,this._prefix=this._config.prefix,this._cookie=this._config.cookie,this._notify=this._config.notify,this._storageType=this._config.storageType,this._$rootScope=this._config.rootScope,this._$window=this._config.window,this._$document=this._config.document,this._$parse=this._config.parse,this._$document?this._$document[0]&&(this._$document=this._$document[0]):this._$document=document,"."!==this._prefix.substr(-1)&&(this._prefix=this._prefix?this._prefix+".":""),this._deriveQualifiedKey=function(e){return n._prefix+e}}return e.prototype.isStringNumber=function(e){return/^-?\d+\.?\d*$/.test(e.replace(/["']/g,""))},e.prototype.browserSupportsLocalStorage=function(){try{var e=this._storageType in this._$window&&null!==this._$window[this._storageType],t=this._deriveQualifiedKey("__"+Math.round(1e7*Math.random()));return e&&(this._webStorage=this._$window[this._storageType],this._webStorage.setItem(t,""),this._webStorage.removeItem(t)),e}catch(i){return this._storageType="cookie",this._$rootScope.$broadcast("AngularAppInsights.Storage.notification.error",i.message),!1}},e.prototype.browserSupportsCookies=function(){try{return this._$window.navigator.cookieEnabled||"cookie"in this._$document&&(this._$document.cookie.length>0||(this._$document.cookie="test").indexOf.call(this._$document.cookie,"test")>-1)}catch(e){return this._$rootScope.$broadcast("AngularAppInsights.Storage.notification.error",e.message),!1}},e.prototype.addToCookies=function(e,i){if(t.isUndefined(i))return!1;if((t.isArray(i)||t.isObject(i))&&(i=t.toJson(i)),!this.browserSupportsCookies)return this._$rootScope.$broadcast("AngularAppInsights.Storage.notification.error","COOKIES_NOT_SUPPORTED"),!1;try{var n="",o=new Date,r="";if(null===i?(o.setTime(o.getTime()+-864e5),n="; expires="+o.toUTCString(),i=""):0!==this._cookie.expiry&&(o.setTime(o.getTime()+24*this._cookie.expiry*60*60*1e3),n="; expires="+o.toUTCString()),e){var s="; path="+this._cookie.path;this._cookie.domain&&(r="; domain="+this._cookie.domain),this._$document.cookie=this._deriveQualifiedKey(e)+"="+encodeURIComponent(i)+n+s+r}}catch(a){return this._$rootScope.$broadcast("AngularAppInsights.Storage.notification.error",a.message),!1}return!0},e.prototype.getFromCookies=function(e){if(!this.browserSupportsCookies)return this._$rootScope.$broadcast("AngularAppInsights.Storage.notification.error","COOKIES_NOT_SUPPORTED"),!1;for(var i=this._$document.cookie&&this._$document.cookie.split(";")||[],n=0;n<i.length;n++){for(var o=i[n];" "===o.charAt(0);)o=o.substring(1,o.length);if(0===o.indexOf(this._deriveQualifiedKey(e)+"=")){var r=decodeURIComponent(o.substring(this._prefix.length+e.length+1,o.length));try{var s=JSON.parse(r);return t.fromJson(s)}catch(a){return r}}}return null},e.prototype.addToLocalStorage=function(e,i){if(t.isUndefined(i)?i=null:(t.isObject(i)||t.isArray(i)||t.isNumber(+i||i))&&(i=t.toJson(i)),!this.browserSupportsLocalStorage()||"cookie"===this._self.storageType)return this.browserSupportsLocalStorage()||this._$rootScope.$broadcast("AngularAppInsights.Storage.notification.warning","LOCAL_STORAGE_NOT_SUPPORTED"),this._notify.setItem&&this._$rootScope.$broadcast("AngularAppInsights.Storage.notification.setitem",{key:e,newvalue:i,storageType:"cookie"}),this.addToCookies(e,i);try{(t.isObject(i)||t.isArray(i))&&(i=t.toJson(i)),this._webStorage&&this._webStorage.setItem(this._deriveQualifiedKey(e),i),this._notify.setItem&&this._$rootScope.$broadcast("AngularAppInsights.Storage.notification.setitem",{key:e,newvalue:i,storageType:this._self.storageType})}catch(n){return this._$rootScope.$broadcast("AngularAppInsights.Storage.notification.error",n.message),this.addToCookies(e,i)}return!0},e.prototype.getFromLocalStorage=function(e){if(!this.browserSupportsLocalStorage()||"cookie"===this._self.storageType)return this.browserSupportsLocalStorage()||this._$rootScope.$broadcast("AngularAppInsights.Storage.notification.warning","LOCAL_STORAGE_NOT_SUPPORTED"),this.getFromCookies(e);var i=this._webStorage?this._webStorage.getItem(this._deriveQualifiedKey(e)):null;return i&&"null"!==i?"{"===i.charAt(0)||"["===i.charAt(0)||this.isStringNumber(i)?t.fromJson(i):i:null},e.prototype.getStorageType=function(){return this._storageType},e.prototype.isSupported=function(){return this.browserSupportsLocalStorage()},e.prototype.set=function(e,t){return this.addToLocalStorage(e,t)},e.prototype.get=function(e){return this.getFromLocalStorage(e)},e.prototype.deriveKey=function(e){return this._deriveQualifiedKey(e)},e.prototype.isCookiesSupported=function(){return this.browserSupportsCookies()},e.prototype.setCookie=function(e,t){this.addToCookies(e,t)},e.prototype.getCookie=function(e){return this.getFromCookies(e)},e.defaultConfig={prefix:"ls",storageType:"localStorage",cookie:{expiry:30,path:"/"},notify:{setItem:!0,removeItem:!1}},e}(),n=(function(){function e(){}return e}(),function(){function e(){}return e}(),function(){function e(e,i,n,o,r,s){t.isUndefined(e)||this.setFunctionName(e),t.isUndefined(r)||this.setColumnNumber(r),t.isUndefined(i)||this.setArgs(i),t.isUndefined(n)||this.setFileName(n),t.isUndefined(o)||this.setLineNumber(o),t.isUndefined(s)||this.setLevelNumber(s)}return e.prototype.setFunctionName=function(e){this.method=String(e)},e.prototype.setArgs=function(e){if("[object Array]"!==Object.prototype.toString.call(e))throw new TypeError("Args must be an Array");this.args=e},e.prototype.setFileName=function(e){this.fileName=String(e)},e.prototype.setLineNumber=function(e){return t.isNumber(e)?void(this.lineNumber=Number(e)):void(this.lineNumber=void 0)},e.prototype.setColumnNumber=function(e){return t.isNumber(e)?void(this.columnNumber=Number(e)):void(this.columnNumber=void 0)},e.prototype.setLevelNumber=function(e){if(!t.isNumber(e))throw new TypeError("Level Number must be a Number");this.level=Number(e)},e.prototype.toString=function(){var e=this.method||"{anonymous}",i="("+(this.args||[]).join(",")+")",n=this.fileName?"@"+this.fileName:"",o=t.isNumber(this.lineNumber)?":"+this.lineNumber:"",r=t.isNumber(this.columnNumber)?":"+this.columnNumber:"";return e+i+n+o+r},e}()),o=function(){function e(){}return e.parse=function(t){return"undefined"!=typeof t.stacktrace||"undefined"!=typeof t["opera#sourceloc"]?e.parseOpera(t):t.stack&&t.stack.match(e.chromeIeStackRegexp)?e.parseChromeOrInternetExplorer(t):t.stack&&t.stack.match(e.firefoxSafariStackRegexp)?e.parseFireFoxOrSafari(t):null},e.extractLocation=function(e){if(-1===e.indexOf(":"))return[];var t=e.split(":"),i=t.pop(),n=t[t.length-1];if(!isNaN(parseFloat(n))&&isFinite(n)){var o=t.pop();return[t.join(":"),o,i]}return[t.join(":"),i,void 0]},e.parseChromeOrInternetExplorer=function(e){var t=this,i=0;return e.stack.split("\n").slice(1).map(function(e){var o=e.replace(/^\s+/,"").split(/\s+/).slice(1),r=void 0!==o[0]?t.extractLocation(o.pop().replace(/[\(\)\s]/g,"")):["unknown","unknown","unknown"],s=o[0]&&"Anonymous"!==o[0]?o[0]:"unknown";return new n(s,void 0,r[0],r[1],r[2],i++)},this)},e.parseFireFoxOrSafari=function(t){var i=this,o=0;return t.stack.split("\n").filter(function(t){return!!t.match(e.firefoxSafariStackRegexp)},this).map(function(e){var t=e.split("@"),r=i.extractLocation(t.pop()),s=t.shift()||"unknown";return new n(s,void 0,r[0],r[1],r[2],o++)},this)},e.parseOpera=function(e){return!e.stacktrace||e.message.indexOf("\n")>-1&&e.message.split("\n").length>e.stacktrace.split("\n").length?this.parseOpera9(e):e.stack?this.parseOpera11(e):this.parseOpera10(e)},e.parseOpera9=function(e){for(var t=/Line (\d+).*script (?:in )?(\S+)/i,i=e.message.split("\n"),o=[],r=2,s=i.length;s>r;r+=2){var a=t.exec(i[r]);if(a){var c=0;o.push(new n(void 0,void 0,a[2],a[1],void 0,c++))}}return o},e.parseOpera10=function(e){for(var t=/Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i,i=e.stacktrace.split("\n"),o=[],r=0,s=i.length;s>r;r+=2){var a=t.exec(i[r]);if(a){var c=0;o.push(new n(a[3]||void 0,void 0,a[2],a[1],void 0,c++))}}return o},e.parseOpera11=function(t){var i=0;return t.stack.split("\n").filter(function(t){return!!t.match(e.firefoxSafariStackRegexp)&&!t.match(/^Error created at/)},this).map(function(t){var o,r=t.split("@"),s=e.extractLocation(r.pop()),a=r.shift()||"",c=a.replace(/<anonymous function(: (\w+))?>/,"$2").replace(/\([^\)]*\)/g,"")||void 0;a.match(/\(([^\)]*)\)/)&&(o=a.replace(/^[^\(]+\(([^\)]*)\)$/,"$1"));var p=void 0===o||"[arguments not available]"===o?void 0:o?o.split(","):"";return new n(c,p,s[0],s[1],s[2],i++)},this)},e.firefoxSafariStackRegexp=/\S+\:\d+/,e.chromeIeStackRegexp=/\s+at /,e}(),r=function(){function e(t,i){var n=this;this._angular=i,this._noop=this._angular.noop,e.interceptFuntion=this._noop,t.decorator("$log",["$delegate",function(e){return n._debugFn=e.debug,n._infoFn=e.info,n._warnFn=e.warn,n._errorFn=e.error,n._logFn=e.log,e.debug=n.delegator(n._debugFn,"debug"),e.info=n.delegator(n._infoFn,"info"),e.warn=n.delegator(n._warnFn,"warn"),e.error=n.delegator(n._errorFn,"error"),e.log=n.delegator(n._logFn,"log"),e}])}return e.prototype.setInterceptFunction=function(t){e.interceptFuntion=t},e.prototype.getPrivateLoggingObject=function(){return{debug:t.isNullOrUndefined(this._debugFn)?t.noop:this._debugFn,info:t.isNullOrUndefined(this._infoFn)?t.noop:this._infoFn,warn:t.isNullOrUndefined(this._warnFn)?t.noop:this._warnFn,error:t.isNullOrUndefined(this._errorFn)?t.noop:this._errorFn,log:t.isNullOrUndefined(this._logFn)?t.noop:this._logFn}},e.prototype.delegator=function(t,i){return function(){var n=[].slice.call(arguments);e.interceptFuntion(n[0],i),t.apply(null,n)}},e}(),s=function(){function e(i){var n=this;e.errorOnHttpCall=!1,this._interceptFunction=t.noop,i.decorator("$exceptionHandler",["$delegate",function(t){return n._origExceptionHandler=t,function(t,i){e.errorOnHttpCall||n._interceptFunction(t,i),n._origExceptionHandler(t,i)}}])}return e.prototype.setInterceptFunction=function(e){this._interceptFunction=e},e.prototype.getPrivateExceptionHanlder=function(){return t.isNullOrUndefined(this._origExceptionHandler)?t.noop:this._origExceptionHandler},e}(),a=function(){function e(){this.applicationName="",this.autoPageViewTracking=!0,this.autoLogTracking=!0,this.autoExceptionTracking=!0,this.sessionInactivityTimeout=18e5,this.instrumentationKey=""}return e}(),c=function(){function e(){}return e.prototype.send=function(e,t,i){var n=new XMLHttpRequest;n.onerror=function(){i(0)},n.onload=function(){200==n.status?t():i(n.status)},n.open(e.method,e.url,!0);for(var o in e.headers)n.setRequestHeader(o,e.headers[o]);n.send(JSON.stringify(e.data))},e}(),p=(function(){function e(){}return e}(),function(){function e(e,t,i,n,o,r,s,a){var c=this;this._sessionKey="$$appInsights__session",this._version="angular:0.2.8",this._analyticsServiceUrl="https://dc.services.visualstudio.com/v2/track",this._contentType="application/json",this._localStorage=e,this._locale=t,this._window=i,this._location=n,this._httpRequestFactory=s,this.options=a,this._log=o.getPrivateLoggingObject(),this._exceptionHandler=r.getPrivateExceptionHanlder(),this._logInterceptor=o,this._exceptionInterceptor=r,this.options.autoLogTracking&&this._logInterceptor.setInterceptFunction(function(e,t,i){return c.trackTraceMessage(e,t,i)}),this.options.autoExceptionTracking&&this._exceptionInterceptor.setInterceptFunction(function(e,t){return c.trackException(e,t)})}return e.prototype.getUniqueId=function(){var e="$$appInsights__uuid",i=this._localStorage.get(e);return t.isNullOrUndefined(i)&&(i=t.generateGuid(),this._localStorage.set(e,i)),i},e.prototype.makeNewSession=function(){var e={id:t.generateGuid(),accessed:(new Date).getTime()};return this._localStorage.set(this._sessionKey,e),e},e.prototype.getSessionId=function(){var e=this._localStorage.get(this._sessionKey);if(t.isNullOrUndefined(e))e=this.makeNewSession();else{var i=t.isNullOrUndefined(e.accessed)?0:e.accessed,n=(new Date).getTime();n-i>this.options.sessionInactivityTimeout?e=this.makeNewSession():(e.accessed=n,this._localStorage.set(this._sessionKey,e))}return e.id},e.prototype.validateMeasurements=function(e){if(t.isNullOrUndefined(e))return null;if(!t.isObject(e))return this._log.warn("The value of the measurements parameter must be an object consisting of a string/number pairs."),null;var i={};for(var n in e)t.isNumber(e[n])?i[n]=e[n]:this._log.warn("The value of measurement "+n+" is not a number.");return i},e.prototype.validateProperties=function(e){if(t.isNullOrUndefined(e))return null;if(!t.isObject(e))return this._log.warn("The value of the properties parameter must be an object consisting of a string/string pairs."),null;var i={};for(var n in e){var o=e[n];t.isNullOrUndefined(o)||t.isObject(o)||t.isArray(o)?this._log.warn("The value of property "+n+" could not be determined to be a string or number."):i[n]=o}return i},e.prototype.validateSeverityLevel=function(e){var t=["debug","info","warn","error"],i=t.indexOf(e);return i>-1?i:0},e.prototype.sendData=function(e){var t=this._httpRequestFactory(),i={};i.Accept=this._contentType,i["Content-Type"]=this._contentType;var n={method:"POST",url:this._analyticsServiceUrl,headers:i,data:e};try{t.send(n,function(){s.errorOnHttpCall=!1},function(){s.errorOnHttpCall=!0})}catch(o){}},e.prototype.trackPageView=function(i,n,o,r){var s=this.generateAppInsightsData(e.names.pageViews,e.types.pageViews,{ver:1,url:t.isNullOrUndefined(n)?this._location.absUrl():n,name:t.isNullOrUndefined(i)?this._location.path():i,properties:this.validateProperties(o),measurements:this.validateMeasurements(r)});this.sendData(s)},e.prototype.trackEvent=function(t,i,n){var o=this.generateAppInsightsData(e.names.events,e.types.events,{ver:1,name:t,properties:this.validateProperties(i),measurements:this.validateMeasurements(n)});this.sendData(o)},e.prototype.trackTraceMessage=function(i,n,o){if(!t.isNullOrUndefined(i)&&t.isString(i)){var r=this.generateAppInsightsData(e.names.traceMessage,e.types.traceMessage,{ver:1,message:i,severityLevel:this.validateSeverityLevel(n),properties:this.validateProperties(o)});this.sendData(r)}},e.prototype.trackMetric=function(t,i,n){var o=this.generateAppInsightsData(e.names.metrics,e.types.metrics,{ver:1,metrics:[{name:t,value:i}],properties:this.validateProperties(n)});this.sendData(o)},e.prototype.trackException=function(i){if(!t.isNullOrUndefined(i)){var n=o.parse(i),r=this.generateAppInsightsData(e.names.exception,e.types.exception,{ver:1,handledAt:"Unhandled",exceptions:[{typeName:i.name,message:i.message,stack:i.stack,parsedStack:n,hasFullStack:!t.isNullOrUndefined(n)}]});this.sendData(r)}},e.prototype.generateAppInsightsData=function(e,i,n){return this._commonProperties&&(n.properties=n.properties||{},t.extend(n.properties,this._commonProperties)),{name:e,time:(new Date).toISOString(),ver:1,iKey:this.options.instrumentationKey,user:{id:this.getUniqueId(),type:"User"},session:{id:this.getSessionId()},operation:{id:t.generateGuid()},device:{id:"browser",locale:this._locale.id,resolution:this._window.screen.availWidth+"x"+this._window.screen.availHeight,type:"Browser"},internal:{sdkVersion:this._version},data:{type:i,item:n}}},e.prototype.setCommonProperties=function(e){this.validateProperties(e),this._commonProperties=this._commonProperties||{},t.extend(this._commonProperties,e)},e.namespace="Microsoft.ApplicationInsights.",e.names={pageViews:e.namespace+"Pageview",traceMessage:e.namespace+"Message",events:e.namespace+"Event",metrics:e.namespace+"Metric",exception:e.namespace+"Exception"},e.types={pageViews:e.namespace+"PageViewData",traceMessage:e.namespace+"MessageData",events:e.namespace+"EventData",metrics:e.namespace+"MetricData",exception:e.namespace+"ExceptionData"},e}()),u=e.module("$$ApplicationInsights-HttpRequestModule",[]);u.factory("$$applicationInsightsHttpRequestService",function(){return function(){return new c}});var h,l,d=e.module("ApplicationInsightsModule",["$$ApplicationInsights-HttpRequestModule"]);new t(e),d.config(["$provide",function(t){h=new r(t,e),l=new s(t)}]),d.provider("applicationInsightsService",function(){return new f}),d.run(["$rootScope","$location","applicationInsightsService",function(e,t,i){e.$on("$locationChangeSuccess",function(){i.options.autoPageViewTracking&&i.trackPageView(i.options.applicationName+t.path())})}]);var f=function(){function e(){var e=this;this._options=new a,this.$get=["$locale","$window","$location","$rootScope","$parse","$document","$$applicationInsightsHttpRequestService",function(t,n,o,r,s,a,c){var u=new i({window:n,rootScope:r,document:a,parse:s});return new p(u,t,n,o,h,l,c,e._options)}]}return e.prototype.configure=function(e,i,n){t.isString(i)?(this._options.instrumentationKey=e,this._options.applicationName=i,this._options.autoPageViewTracking=t.isNullOrUndefined(n)?!0:n):(t.extend(this._options,i),this._options.instrumentationKey=e)},e}()}(window.angular);
!function(){"use strict";angular.element(document).ready(function(){$.getJSON("api/environment",function(n){angular.module("app").constant("environment",n),angular.bootstrap(document,["app"])})}),angular.module("app",["ngAnimate","ngRoute","AdalAngular","ui.bootstrap","ApplicationInsightsModule"])}();
!function(){"use strict";angular.module("app").config(["$routeProvider","$locationProvider",function(e,r){e.when("/",{templateUrl:"app/home/home.html",controller:"HomeController",requireADLogin:!0}).when("/login",{templateUrl:"app/login/login.html",controller:"LoginController"}).when("/groups",{templateUrl:"app/groups/groups.html",controller:"GroupsController",requireADLogin:!0}).when("/groups/:name",{templateUrl:"app/groups/group/group.html",controller:"GroupController",requireADLogin:!0}).when("/assessments/new",{templateUrl:"app/assessments/new/new-assessment.html",controller:"NewAssessmentController",requireADLogin:!0}).when("/assessments/:id",{templateUrl:"app/assessments/review/assessment-review.html",controller:"AssessmentReviewController",requireADLogin:!0}).when("/assessments/:id/print",{templateUrl:"app/assessments/print/assessment-print.html",controller:"AssessmentPrintController",requireADLogin:!0}).when("/admin",{templateUrl:"app/admin/admin.html",controller:"AdminController",requireADLogin:!0}).when("/help",{templateUrl:"app/help/help.html",requireADLogin:!0}).otherwise({redirectTo:"/"})}])}();
!function(){"use strict";angular.module("app").config(["$httpProvider","adalAuthenticationServiceProvider","environment",function(n,i,t){i.init({instance:"https://login.microsoftonline.com/",tenant:"common",clientId:t.aad_client_id},n)}])}();
!function(){"use strict";angular.module("app").config(["applicationInsightsServiceProvider","environment",function(n,i){if(console.log("Beginning settings"),null!==i.appinsights_instrumentationkey){console.log("Setting up Application Insights");var t={applicationName:"app"};n.configure(i.appinsights_instrumentationkey,t)}}])}();
!function(){"use strict";function o(o,e,n,t,s){function r(){e.info("AdminController activated"),u()}function u(){i(),l()}function i(){o.loadingGroups=!0,t.getData().then(function(e){o.groups=e,o.loadingGroups=!1})}function l(){o.loadingAssessments=!0,s.getAssessments().then(function(e){console.log("Retrieved assessment data"),o.assessments=e,o.loadingAssessments=!1})}r(),o.openParterNewModal=function(t){var s=n.open({templateUrl:"/app/layout/modal/group-new/group-new.modal.html",controller:"GroupNewModalController",size:"sm"});s.result.then(function(e){o.groups.push(e)},function(){e.info("Modal dismissed at: "+new Date)})},o.editGroup=function(o){var t=n.open({templateUrl:"/app/layout/modal/group-edit/group-edit.modal.html",controller:"GroupEditModalController",size:"sm",resolve:{group:function(){return o}}});t.result.then(function(o){},function(){e.info("Modal dismissed at: "+new Date)})},o.deleteGroup=function(e){confirm("Are you sure you would like to delete the group "+e.title+"?")===!0&&t.deleteGroup(e.id).then(function(n){n===!0?o.groups.forEach(function(n,t){n.id==e.id&&o.groups.splice(t,1)}):console.log("There was a problem deleting group "+e.id)})},o.formatDate=function(o){return moment(o).calendar()},o.navigateGroup=function(o){document.location.href="#/groups/"+o},o.navigateAssessment=function(o){document.location.href="#/assessments/"+o}}angular.module("app").controller("AdminController",o),o.$inject=["$scope","$log","$uibModal","GroupFactory","AssessmentFactory"]}();
!function(){"use strict";function t(t,e){function s(){function s(t){return t.data}function n(t){e.error("XHR Failed for getAssessments."+t.data)}return t.get("api/assessments").then(s)["catch"](n)}function n(s){function n(t){return t.data}function r(t){e.error("XHR Failed for getAssessments."+t.data)}return t.post("api/assessments/my",{upn:s}).then(n)["catch"](r)}function r(s){function n(t){return t.data}function r(t){e.error("XHR Failed for getAssessment."+t.data)}return t.get("api/assessments/"+s).then(n)["catch"](r)}function a(s){function n(t){return t.data}function r(t){e.error("XHR Failed for createAssessment."+t.data)}return t.post("api/assessments",s).then(n)["catch"](r)}function c(s){function n(t){return t.data}function r(t){e.error("XHR Failed for deleteAssessment."+t.data)}return t["delete"]("api/assessments/"+s).then(n)["catch"](r)}var o={getAssessments:s,getMyAssessments:n,getAssessment:r,createAssessment:a,deleteAssessment:c};return o}angular.module("app").factory("AssessmentFactory",t),t.$inject=["$http","$log"]}();
!function(){"use strict";function t(t,r){function n(){function n(t){return t.data}function e(t){r.error("XHR Failed for getData."+t.data)}return t.get("api/groups").then(n)["catch"](e)}function e(n){function e(t){return t.data}function a(t){r.error("XHR Failed for addGroup."+t.data)}return t.post("api/groups",{groupName:n}).then(e)["catch"](a)}function a(n){function e(t){return t.data}function a(t){r.error("XHR Failed for editGroup."+t.data)}return t.put("api/groups",n).then(e)["catch"](a)}function o(n){function e(t){return t.data}function a(t){r.error("XHR Failed for deleteGroup."+t.data)}return t({url:"api/groups",method:"DELETE",data:{id:n},headers:{"Content-Type":"application/json;charset=utf-8"}}).then(e)["catch"](a)}function u(n){function e(t){return t.data}function a(t){r.error("XHR Failed for getAssessments."+t.data)}return t.get("api/groups/"+n+"/assessments").then(e)["catch"](a)}var i={getData:n,addGroup:e,editGroup:a,deleteGroup:o,getAssessments:u};return i}angular.module("app").factory("GroupFactory",t),t.$inject=["$http","$log"]}();
!function(){"use strict";function t(t,a){function n(){function n(t){return t.data}function r(t){a.error("XHR Failed for getData."+t.data)}return t.get("api/schema").then(n)["catch"](r)}var r={getData:n};return r}angular.module("app").factory("SchemaFactory",t),t.$inject=["$http","$log"]}();
!function(){"use strict";function t(){return function(t){return _.startCase(t)}}angular.module("app").filter("capitalize",t)}();
!function(){"use strict";function n(){return function(n){return n>=1&&1.74>n?"Basic":n>=1.75&&2.49>n?"Standardized":n>=2.5&&3.24>n?"Advanced":n>=3.25&&4>=n?"Dynamic":void 0}}angular.module("app").filter("transformScore",n)}();
!function(){"use strict";function o(o,n,t,c,r){function e(){t.info("GroupsController Activated"),i()}function i(){o.loading=!0,c.getData().then(function(n){o.groups=n,o.loading=!1})}e(),o.navigate=function(o){document.location.href="#/groups/"+o}}angular.module("app").controller("GroupsController",o),o.$inject=["$scope","$location","$log","GroupFactory","AssessmentFactory"]}();
!function(){"use strict";function n(n,e,o,t){function s(){o.info("HomeController Activated"),i(),c()}function i(){n.loading=!0,t.getMyAssessments(n.userInfo.profile.upn).then(function(e){n.assessments=e,n.loading=!1})}function c(){e.search().debug&&(n.debug=!0,console.info("Debug mode initiated"))}s(),n.formatDate=function(n){return moment(n).calendar()},n.navigate=function(n){document.location.href="#/assessments/"+n}}angular.module("app").controller("HomeController",n),n.$inject=["$scope","$location","$log","AssessmentFactory"]}();
!function(){"use strict";function n(n,i){function o(){n.login=function(){i.login()}}var t=this;t.title="login",o()}angular.module("app").controller("LoginController",n),n.$inject=["$scope","adalAuthenticationService"]}();
!function(){"use strict";function e(e,s,n,t,o,a,u,r){function i(){t.info("NewAssessmentController activated"),e.newAssessment={assessment:{}},c(),p()}function c(){e.loadingGroups=!0,o.getData().then(function(s){e.groups=s,e.loadingGroups=!1}),a.getData().then(function(s){e.rubricData=s,l()})}function l(){e.newAssessment={version:e.rubricData.version,author:{userName:e.userInfo.userName,name:e.userInfo.profile.name,upn:e.userInfo.profile.upn},created:(new Date).toISOString(),assessment:{},deleted:!1},$.each(e.rubricData.values,function(s,n){e.newAssessment.assessment[s]={},$.each(n,function(n,t){e.newAssessment.assessment[s][n]={}})})}function m(s,n){var t=[],o=0;$.each(n,function(e,s){s.value>=0&&t.push(s.value)});for(var a=0;a<t.length;a++)o+=parseInt(t[a]);var u=+(o/t.length).toFixed(2);e.newAssessment.score[s]=u}function f(){var s=[],n=0;$.each(e.newAssessment.assessment,function(e,n){$.each(n,function(e,n){n.value>=0&&s.push(n.value)})});for(var t=0;t<s.length;t++)n+=parseInt(s[t]);var o=+(n/s.length).toFixed(2);e.newAssessment.score.overall=o}function p(){n.search().debug&&(e.debug=!0,console.info("Debug mode initiated"))}i(),e.answer=function(s,n,t){e.newAssessment.assessment[s][n].title==t.title?e.newAssessment.assessment[s][n]={}:e.newAssessment.assessment[s][n]=t},e.submitAssessment=function(){u.createAssessment(e.newAssessment).then(function(e){t.log("Finished posting new assessment"),n.path("assessments/"+e.id)})},e.cancelAssessment=function(){s.location="/#/home"},e.calculateAverage=function(){e.newAssessment.score={},f(),$.each(e.newAssessment.assessment,function(e,s){m(e,s)})},e.selectGroup=function(s){e.newAssessment.group=s.title},e.selectGroupNew=function(){alert("Coming Soon")},e.$watch("groupTypeahead",function(e){""===e&&l()}),e.openNewGroupModal=function(){var s=r.open({templateUrl:"/app/layout/modal/group-new/group-new.modal.html",controller:"GroupNewModalController",size:"sm"});s.result.then(function(s){e.newAssessment.group=s.title,e.groupTypeahead=s.title},function(){t.info("Modal dismissed at: "+new Date)})}}angular.module("app").controller("NewAssessmentController",e),e.$inject=["$scope","$window","$location","$log","GroupFactory","SchemaFactory","AssessmentFactory","$uibModal"]}();
!function(){"use strict";function t(t,n,e,s,a,o,c){function i(){n.info("AssessmentPrintController activated"),r()}function r(){t.loading=!0,o.getData().then(function(n){t.rubricData=n}),c.getAssessment(e.id).then(function(n){t.assessment=n,t.loading=!1,u(),setTimeout(function(){s.print()},3e3)})}function u(){_.size(t.assessment.score)>1&&(t.sectionScores=!0)}i(),t.date=function(){return moment().format("M/D/YYYY")},t.formatMaturity=function(t){var n=null;switch(t){case 1:n="Basic";break;case 2:n="Standardized";break;case 3:n="Advanced";break;case 4:n="Dynamic"}return n}}angular.module("app").controller("AssessmentPrintController",t),t.$inject=["$scope","$log","$routeParams","$window","$location","SchemaFactory","AssessmentFactory"]}();
!function(){"use strict";function e(e,s,n,t,o,i,a){function c(){s.info("AssessmentReviewController activated"),r(),l(),m()}function r(){e.loading=!0,i.getData().then(function(s){e.rubricData=s}),a.getAssessment(n.id).then(function(s){e.assessment=s,e.loading=!1,u()})}function l(){e.shareUrl=o.absUrl()}function u(){_.size(e.assessment.score)>1&&(e.sectionScores=!0)}function m(){o.search().debug&&(e.debug=!0,console.info("Debug mode initiated"))}c(),e.sendEmail=function(e,s){var n="mailto:?subject=COE Assessment for "+escape(e)+"&body=Assessment is available at "+escape(s);t.location.href=n},e.printPage=function(){t.open(o.absUrl()+"/print")},e.deleteAssessment=function(e){confirm("Are you sure you would like to delete this assessment?")===!0?a.deleteAssessment(e).then(function(){console.log("Deleted record "+e),o.path("home")}):console.log("You clicked cancel")},e.formatDate=function(e){return moment(e).format("MMMM Do YYYY, h:mm:ss a")}}angular.module("app").controller("AssessmentReviewController",e),e.$inject=["$scope","$log","$routeParams","$window","$location","SchemaFactory","AssessmentFactory"]}();
!function(){"use strict";function t(t,e,s,n,o,a){function r(){s.info("GroupController Activated"),c()}function c(){t.loading=!0,t.groupName=n.name,t.assessments=[],o.getAssessments(t.groupName).then(function(e){t.assessments=e,t.loading=!1})}r(),t.navigate=function(t){document.location.href="#/assessments/"+t},t.formatDate=function(t){return moment(t).calendar()},t.firstDate=function(){return t.assessments.length>0?t.formatDate(t.assessments.slice(-1)[0].created):void 0},t.lastDate=function(){return t.assessments.length>0?t.formatDate(t.assessments[0].created):void 0}}angular.module("app").controller("GroupController",t),t.$inject=["$scope","$location","$log","$routeParams","GroupFactory","AssessmentFactory"]}();
!function(){"use strict";function o(o,t){function n(){e()}function e(){o.logout=function(){t.logOut()},o.status={isopen:!1},o.toggled=function(o){console.log("Dropdown is now: ",o)},o.toggleDropdown=function(t){t.preventDefault(),t.stopPropagation(),o.status.isopen=!o.status.isopen}}var i=this;i.title="topnav",n()}angular.module("app").controller("TopNavController",o),o.$inject=["$scope","adalAuthenticationService"]}();
!function(){"use strict";function o(o,t,e,i,n){function l(){t.info("GroupEditModalController Activated"),o.edittedGroup={},o.edittedGroup.title=n.title}l(),o.submitGroup=function(){n.title=o.edittedGroup.title,console.log("Starting edit group process"),i.editGroup(n).then(function(o){o===!1?console.log("There was an issue editing the group"):console.log('Successfully edited a group now named "'+o.title+'"'),e.close(o)})},o.cancel=function(){e.dismiss("cancel")}}angular.module("app").controller("GroupEditModalController",o),o.$inject=["$scope","$log","$uibModalInstance","GroupFactory","group"]}();
!function(){"use strict";function o(o,n,e,c){function t(){n.info("GroupNewModalController Activated")}t(),o.submitGroup=function(){console.log("Starting new group creation");var n=o.newGroupName;c.addGroup(n).then(function(o){console.log('Successfully created a new group named "'+o.title+'"'),e.close(o)})},o.cancel=function(){e.dismiss("cancel")}}angular.module("app").controller("GroupNewModalController",o),o.$inject=["$scope","$log","$uibModalInstance","GroupFactory"]}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
